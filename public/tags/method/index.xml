<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>method on (kei㉿Spielplatz)-[~]$ sudo _</title>
    <link>/tags/method/</link>
    <description>Recent content in method on (kei㉿Spielplatz)-[~]$ sudo _</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 10 Apr 2022 16:37:53 -0400</lastBuildDate><atom:link href="/tags/method/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Iterators - While Loop</title>
      <link>/posts/python-note/iterators-while-loop/</link>
      <pubDate>Sun, 10 Apr 2022 16:37:53 -0400</pubDate>
      
      <guid>/posts/python-note/iterators-while-loop/</guid>
      <description>While loop can also be use for iteration but while loop is typically use when looping over some condition Example of While loop  some_condition = True  while some_condition:  print(&amp;#34;Hello World!&amp;#34;) &amp;ndash; This code will have an infinite loop, basically it will run forever until the computer crash. It will stop when I hit Ctrl + C to interrupt it, or if there is a break keyword somewhere in the code block.</description>
    </item>
    
    <item>
      <title>Iterators - For Loop</title>
      <link>/posts/python-note/iterators-for-loop/</link>
      <pubDate>Sun, 20 Mar 2022 10:25:22 -0400</pubDate>
      
      <guid>/posts/python-note/iterators-for-loop/</guid>
      <description>I can use For loop and While loop for Iteration. They basically do about the same thing but the preferred method is using a For loop.
  For loop is typically use when iterating over a sequence of values (like a list or dictionary).
  Examples of Iteration using For loop:
  some_nums = [2, 4, 88, 99, 101] for num in some_nums:  print(num) This will get the sum of all the integers value in a list :</description>
    </item>
    
    <item>
      <title>Sets</title>
      <link>/posts/python-note/sets/</link>
      <pubDate>Sun, 20 Mar 2022 06:28:07 -0400</pubDate>
      
      <guid>/posts/python-note/sets/</guid>
      <description>Sets using curly braces { } Example of a Set : mixed_set = {11, 200, 404, 30, &amp;quot;Python&amp;quot;, &amp;quot;JavaScript&amp;quot;, 99, &amp;quot;Ruby&amp;quot;, &amp;quot;Rust&amp;quot;} Sets are unordered collection of elements, meaning that everytime I run the code the order of the items/elements will be print out randomly  mixed_set = {11, 200, 404, 30, &amp;#34;Python&amp;#34;, &amp;#34;JavaScript&amp;#34;, 99, &amp;#34;Ruby&amp;#34;, &amp;#34;Rust&amp;#34;}  print(type(mixed_set))  print(mixed_set)  Sets don&amp;rsquo;t allow for duplicate elements  duplicates = {11, 11, &amp;#34;python&amp;#34;, &amp;#34;ruby&amp;#34;, 30, 9, 30, &amp;#34;python&amp;#34;}  print(duplicates)  If I have a List with some duplicates items I can cast it to a Set to remove them  duplicate_list = [&amp;#34;python&amp;#34;, &amp;#34;java&amp;#34;, &amp;#34;ruby&amp;#34;, &amp;#34;java&amp;#34;, 300, 9, 9, 300, &amp;#34;python&amp;#34;, 1, 10]  print(duplicate_list)  new_set = set(duplicate_list)  print(new_set)   Set is optimized for mainly to find information in them and for mathematical operations</description>
    </item>
    
    <item>
      <title>Tuples</title>
      <link>/posts/python-note/tuples/</link>
      <pubDate>Wed, 23 Feb 2022 17:20:07 -0500</pubDate>
      
      <guid>/posts/python-note/tuples/</guid>
      <description>Tuples using parentheses ( )
  Example of Tuples
  mixed_tuple = (&amp;#34;mars&amp;#34;, 11, 13, 99, &amp;#34;pluto&amp;#34;, 81, 30, &amp;#34;venus&amp;#34;) tup_str = (&amp;#34;pertama&amp;#34;, &amp;#34;kedua&amp;#34;, &amp;#34;ketiga&amp;#34;)  print(mixed_tuple) print(type(mixed_tuple))  print(tup_str) print(type(tup_str))  To list all the built-in methods and functions available for Tuple, I can use dir()  mixed_tuple = (&amp;#34;mars&amp;#34;, 11, 13, 99, &amp;#34;pluto&amp;#34;, 81, 30, &amp;#34;venus&amp;#34;)  print(dir(mixed_tuple))  Tuple works similar like List, except that Tuple is immutable.</description>
    </item>
    
    <item>
      <title>Dictionaries</title>
      <link>/posts/python-note/dictionaries/</link>
      <pubDate>Tue, 22 Feb 2022 14:45:41 -0500</pubDate>
      
      <guid>/posts/python-note/dictionaries/</guid>
      <description>Dictionaries using key-value pair for the elements
  Example of a Dictionary
  animals = {  &amp;#34;marshmallow&amp;#34;:&amp;#34;a black dog who likes to bark at things&amp;#34;,  &amp;#34;rudolph&amp;#34;:&amp;#34;the very shiny red-nosed reindeer&amp;#34;,  &amp;#34;doraemon&amp;#34;:&amp;#34;a cat with a pocket to access very advanced technological stuffs from the future&amp;#34;  }  I can use dir function to list the built-in methods and functions I can use to work with Dictionaries  animals = { 	&amp;#34;marshmallow&amp;#34;:&amp;#34;a black dog who likes to bark at things&amp;#34;,  &amp;#34;rudolph&amp;#34;:&amp;#34;the very shiny red-nosed reindeer&amp;#34;,  &amp;#34;doraemon&amp;#34;:&amp;#34;a cat with a pocket to access very advanced technological stuffs from the future&amp;#34; }  print(dir(animals))  I can use keys method to see all the keys in a dictionary  animals = {  &amp;#34;marshmallow&amp;#34;:&amp;#34;a black dog who likes to bark at things&amp;#34;,  &amp;#34;rudolph&amp;#34;:&amp;#34;the very shiny red-nosed reindeer&amp;#34;,  &amp;#34;doraemon&amp;#34;:&amp;#34;a cat with a pocket to access very advanced technological stuffs from the future&amp;#34;  }  print(animals.</description>
    </item>
    
    <item>
      <title>Importing Module</title>
      <link>/posts/python-note/importing-module/</link>
      <pubDate>Fri, 11 Feb 2022 23:08:26 -0500</pubDate>
      
      <guid>/posts/python-note/importing-module/</guid>
      <description> To use a Python module I can import it by typing import followed by the name of the module. This will import the module with all its functions and methods  import string  print(string.ascii_lowercase)  I can just import a particular method or function in a module instead of the whole module  from string import ascii_uppercase  print(ascii_uppercase) </description>
    </item>
    
    <item>
      <title>String Methods and Functions</title>
      <link>/posts/python-note/str-methods-and-functions/</link>
      <pubDate>Fri, 11 Feb 2022 16:02:25 -0500</pubDate>
      
      <guid>/posts/python-note/str-methods-and-functions/</guid>
      <description>Methods and Functions to use on Strings   The Python Standard Library is the standard library that is distributed with Python. This library reference manual is available at Python Standard Library
  Some of the functions and methods I can use on string objects are:
 len(), type(), id(), capitalize(), upper(), lower(), strip(), find(), split(), join()    Functions do not tied to the object. I have to type the function name followed by parentheses and pass in the object as an argument.</description>
    </item>
    
  </channel>
</rss>
